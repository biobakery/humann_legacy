import os.path
import re
import subprocess
import sys

c_strInputCOGC		= "../cogc"
c_strFileGenomes	= "genomes.txt"
c_strFileMockrefs	= "mockrefs.txt"
c_strProgGB2ID		= "./gb2id.py"
c_strProgGB2CG		= "./gb2cg.py"
c_strProgMockrefs	= "./mockrefs.py"
c_strURL			= "ftp://chuttenh:essingly@ftp.hmpdacc.org/WholeMetagenomic/00-PreProduction/04-Annotation/MockAssemblies/mock_community_genomes/"
c_strRefseq			= "REFSEQ"
c_strTXT			= ".txt"
c_strPTT			= ".ptt"
c_strGBK			= ".gbk"
c_strGB2ID			= ".gb2id"
c_strGB2CG			= ".gb2cg"

def encurl( strPath, strOut = None ):

	strRet = "curl --ftp-ssl -k " + c_strURL + strPath
	if strOut:
		strRet += " -o " + strOut
	return strRet

def sh( strCmd ):

	sys.stdout.write( "%s\n" % strCmd )
	subprocess.call( strCmd, shell = True )

def funcGenomeGBK( target, source, env ):

	strT = str(target[0])
	astrSs = [pF.get_abspath( ) for pF in source]
	strBase = strT.replace( c_strGBK, "" )
	strGenome = astrSs[0]
	fFirst = fRefseq = True
	for strLine in open( strGenome ):
		if strLine.find( c_strRefseq ) >= 0:
			fRefseq = False
			continue
		if fRefseq:
			continue
		pMatch = re.search( '^\S+\s+\d+\s+\d+\s+\S+\s+\d+\s+\S+\s+\d+\s+\S+\s+(.+\.gbk)$',
			strLine.rstrip( ) )
		if not pMatch:
			continue
		sh( encurl( strBase + "/" + pMatch.group( 1 ) ) + " >" +
			( "" if fFirst else ">" ) + " " + strT )
		fFirst = False

def funcGenomeTXT( target, source, env ):

	strT = str(target[0])
	strDir = strT.replace( c_strTXT, "" ) + "/"
	sh( encurl( strDir + "RefSeq/", strT ) )
	sh( "echo " + c_strRefseq + " >> " + strT )
	sh( encurl( strDir ) + " >> " + strT )

def funcGenomePTT( target, source, env ):

	strT = str(target[0])
	astrSs = [pF.get_abspath( ) for pF in source]
	strBase = strT.replace( c_strPTT, "" )
	strGenome = astrSs[0]
	fFirst = fRefseq = True
	for strLine in open( strGenome ):
		if strLine.find( c_strRefseq ) >= 0:
			fRefseq = False
			continue
		pMatch = re.search( '^\S+\s+\d+\s+\d+\s+\S+\s+\d+\s+\S+\s+\d+\s+\S+\s+(.+\.ptt)$',
			strLine.rstrip( ) )
		if not pMatch:
			continue
		sh( encurl( strBase + "/" + ( "RefSeq/" if fRefseq else "" ) +
			pMatch.group( 1 ) ) + " >" + ( "" if fFirst else ">" ) + " " +
			strT )
		fFirst = False

def funcGenomeGB2ID( target, source, env ):

	strT = str(target[0])
	astrSs = [pF.get_abspath( ) for pF in source]
	strGB, strProg = astrSs

	sh( strProg + " < " + strGB + " > " + strT )

def funcGenomeGB2CG( target, source, env ):

	strT = str(target[0])
	astrSs = [pF.get_abspath( ) for pF in source]
	strPTT, strGB2ID, strProg = astrSs

	sh( strProg + " " + strGB2ID + " < " + strPTT + " > " + strT )

pE = Environment( )

sh( encurl( "", c_strFileGenomes ) )
astrGB2CGs = []
def funcGenomes( strFileGenomes ):

	for strLine in open( strFileGenomes ):
		pMatch = re.search( '^\S+\s+\d+\s+\d+\s+\S+\s+\d+\s+\S+\s+\d+\s+\S+\s+(.+_.+)$',
			strLine.rstrip( ) )
		if not pMatch:
			continue
		strTXT, strPTT, strGBK, strGB2ID, strGB2CG = (( pMatch.group( 1 ) +
			strCur ) for strCur in (c_strTXT, c_strPTT, c_strGBK, c_strGB2ID,
			c_strGB2CG))
		pE.Command( strTXT, None, funcGenomeTXT )
		pE.Command( strGBK, [strTXT], funcGenomeGBK )
		pE.Command( strPTT, [strTXT], funcGenomePTT )
		pE.Command( strGB2ID, [strGBK, c_strProgGB2ID], funcGenomeGB2ID )
		pE.Command( strGB2CG, [strPTT, strGB2ID, c_strProgGB2CG],
			funcGenomeGB2CG )
		astrGB2CGs.append( strGB2CG )
funcGenomes( c_strFileGenomes )

pB = Builder( suffix = c_strGBK, src_suffix = c_strTXT,
	action = funcGenomeGBK )
pE.Append( BUILDERS = {"GBK":pB} )

pB = Builder( suffix = c_strPTT, src_suffix = c_strTXT,
	action = funcGenomePTT )
pE.Append( BUILDERS = {"PTT":pB} )

def funcMockrefs( target, source, env ):

	strT = str(target[0])
	astrSs = [pF.get_abspath( ) for pF in source]
	strProg, strCOGC, astrGB2CGs = astrSs[0], astrSs[1], astrSs[2:]
	sh( " ".join( [strProg] + astrGB2CGs ) + " < " + strCOGC + " > " + strT )

pE.Command( c_strFileMockrefs, [c_strProgMockrefs, c_strInputCOGC] +
	astrGB2CGs, funcMockrefs )
Default( c_strFileMockrefs )
